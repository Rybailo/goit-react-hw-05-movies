{"version":3,"file":"static/js/651.802b326d.chunk.js","mappings":"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","sources":["Pages/EditorList/EditorList.styled.jsx","Pages/EditorList/EditorList.jsx","components/Form.jsx/Form.styled.jsx","components/Form.jsx/Form.jsx","Pages/Movies/Movies.jsx","Services/api.js"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\n\nexport const List = styled.ul`\n  display: grid;\n  max-width: calc(100vw - 48px);\n  grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));\n  grid-gap: 30px;\n  padding: 0;\n  list-style: none;\n  margin-left: auto;\n  margin-right: auto;\n`;\n\nexport const Item = styled.li`\n  font-weight: 600;\n  text-align: center;\n  font-size: 20px;\n  margin: 10px;\n`;\n\nexport const MovieLink = styled(Link)`\n  text-decoration: none;\n  color: #191d1e;\n  display: flex;\n  flex-direction: column;\n\n  &:hover {\n    color: #0069ef;\n  }\n`;\n","import { useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { List, Item, MovieLink } from './EditorList.styled';\n\nconst EditorList = ({ films, poster_path }) => {\n  const location = useLocation();\n\n  return (\n    <List>\n      {films.map(film => (\n        <Item key={film.id}>\n          <MovieLink to={`/movies/${film.id}`} state={{ from: location }}>\n            <img\n              src={'http://image.tmdb.org/t/p/w300' + film.poster_path}\n              alt={film.title}\n            ></img>\n            {film.title}\n          </MovieLink>\n        </Item>\n      ))}\n    </List>\n  );\n};\n\nEditorList.propTypes = {\n  films: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      id: PropTypes.number.isRequired,\n    })\n  ),\n};\n\nexport default EditorList;\n","import styled from '@emotion/styled';\n\nexport const SearchForm = styled.form`\n  display: flex;\n  align-items: center;\n`;\n\nexport const Input = styled.input`\n  padding: 12px 14px;\n  font: inherit;\n  cursor: pointer;\n  border-radius: 4px;\n  border: 3px solid #191d1e;\n  font-weight: 600;\n  font-size: 20px;\n  margin-right: 10px;\n  border-radius: 4px 8px;\n  outline: none;\n\n  &:hover {\n    color: #0069ef;\n    border: 3px solid #0069ef;\n  }\n`;\n\nexport const Button = styled.button`\n  padding: 12px 12px;\n  font: inherit;\n  cursor: pointer;\n  border-radius: 4px;\n  border: 3px solid #191d1e;\n  color: #191d1e;\n  font-weight: 600;\n  font-size: 20px;\n  border-radius: 4px 8px;\n\n  &:hover {\n    color: #0069ef;\n    border: 3px solid #0069ef;\n  }\n`;\n","import { SearchForm, Input, Button } from './Form.styled';\nimport { useSearchParams } from 'react-router-dom';\n\nconst Form = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const sQuery = searchParams.get('searchQuery');\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const searchValue = e.currentTarget.elements.query.value;\n    setSearchParams({\n      searchQuery: searchValue,\n    });\n  };\n\n  return (\n    <SearchForm onSubmit={handleSubmit}>\n      <Input type=\"text\" name=\"query\" defaultValue={sQuery} autoFocus />\n      <Button type=\"submit\">Search</Button>\n    </SearchForm>\n  );\n};\n\nexport default Form;\n","import { useEffect, useState } from 'react';\nimport Loader from '../../components/Loader/Loader';\nimport EditorList from '../../Pages/EditorList/EditorList';\nimport Form from '../../components/Form.jsx/Form';\nimport { fetchSearchByKeyword } from 'Services/api';\nimport { useSearchParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\n\nconst Movies = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [films, setFilms] = useState(null);\n  const [searchParams] = useSearchParams();\n  const sQuery = searchParams.get('searchQuery');\n\n  useEffect(() => {\n    const fetchData = async () => {\n      if (sQuery === null) return;\n\n      try {\n        setIsLoading(true);\n        const film = await fetchSearchByKeyword(sQuery);\n        setFilms(film);\n      } catch (error) {\n        toast(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    if (sQuery !== null) {\n      fetchData();\n    }\n  }, [sQuery]);\n\n  return (\n    <main>\n      {<Form />}\n      {isLoading && <Loader />}\n      {sQuery !== null && sQuery?.length > 0}\n      {films && <EditorList films={films} />}\n    </main>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '63a82337917a31c35dd7954063a86f96';\n\nexport const fetchTrending = async () => {\n  const response = await axios.get(`trending/movie/day?api_key=${API_KEY}`);\n  return response.data.results;\n};\n\nexport const fetchSearchByKeyword = async keyword => {\n  const response = await axios.get(\n    `search/movie?api_key=${API_KEY}&language=en-US&page=1&include_adult=false&query=${keyword}`\n  );\n  return response.data.results;\n};\n\nexport const fetchMovieDetails = async movieId => {\n  const response = await axios.get(\n    `movie/${movieId}?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n};\n\nexport const fetchActors = async movieId => {\n  const response = await axios.get(\n    `movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data.cast;\n};\n\nexport const fetchReviews = async movieId => {\n  const response = await axios.get(\n    `movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n  return response.data.results;\n};\n"],"names":["List","styled","_templateObject","_taggedTemplateLiteral","Item","_templateObject2","MovieLink","Link","_templateObject3","_ref","films","location","poster_path","useLocation","_jsx","children","map","film","_jsxs","to","concat","id","state","from","src","alt","title","SearchForm","Input","Button","_useSearchParams","useSearchParams","_useSearchParams2","_slicedToArray","searchParams","setSearchParams","sQuery","get","onSubmit","e","preventDefault","searchValue","currentTarget","elements","query","value","searchQuery","type","name","defaultValue","autoFocus","_useState","useState","_useState2","isLoading","setIsLoading","_useState3","_useState4","setFilms","useEffect","fetchData","_asyncToGenerator","_regeneratorRuntime","_callee","_context","prev","next","abrupt","fetchSearchByKeyword","sent","t0","toast","message","finish","stop","apply","arguments","Form","Loader","length","EditorList","axios","API_KEY","fetchTrending","response","data","results","_ref2","_callee2","keyword","_context2","_x","fetchMovieDetails","_ref3","_callee3","movieId","_context3","_x2","fetchActors","_ref4","_callee4","_context4","cast","_x3","fetchReviews","_ref5","_callee5","_context5","_x4"],"sourceRoot":""}